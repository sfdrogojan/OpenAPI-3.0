/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Authentication;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// createCampaign
        /// </summary>
        /// <remarks>
        /// Creates a campaign.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the campaign with a maximum length of 128 characters</param>
        /// <param name="description">Description of the campaign with a maximum length of 512 characters</param>
        /// <param name="campaignCode">Unique identifier for the campaign with a maximum length of 36 characters</param>
        /// <param name="color">Hex color value</param>
        /// <param name="favorite">Determines if the campaign will be flagged as a favorite</param>
        /// <returns>Campaign</returns>
        Campaign CreateCampaign (string name, string description, string campaignCode, string color, bool? favorite);

        /// <summary>
        /// createCampaign
        /// </summary>
        /// <remarks>
        /// Creates a campaign.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the campaign with a maximum length of 128 characters</param>
        /// <param name="description">Description of the campaign with a maximum length of 512 characters</param>
        /// <param name="campaignCode">Unique identifier for the campaign with a maximum length of 36 characters</param>
        /// <param name="color">Hex color value</param>
        /// <param name="favorite">Determines if the campaign will be flagged as a favorite</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> CreateCampaignWithHttpInfo (string name, string description, string campaignCode, string color, bool? favorite);
        /// <summary>
        /// getCampaign
        /// </summary>
        /// <remarks>
        /// Retrieves a campaign.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Campaign ID</param>
        /// <returns>Campaign</returns>
        Campaign GetCampaignById (string id);

        /// <summary>
        /// getCampaign
        /// </summary>
        /// <remarks>
        /// Retrieves a campaign.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Campaign ID</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> GetCampaignByIdWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// createCampaign
        /// </summary>
        /// <remarks>
        /// Creates a campaign.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the campaign with a maximum length of 128 characters</param>
        /// <param name="description">Description of the campaign with a maximum length of 512 characters</param>
        /// <param name="campaignCode">Unique identifier for the campaign with a maximum length of 36 characters</param>
        /// <param name="color">Hex color value</param>
        /// <param name="favorite">Determines if the campaign will be flagged as a favorite</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> CreateCampaignAsync (string name, string description, string campaignCode, string color, bool? favorite);

        /// <summary>
        /// createCampaign
        /// </summary>
        /// <remarks>
        /// Creates a campaign.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the campaign with a maximum length of 128 characters</param>
        /// <param name="description">Description of the campaign with a maximum length of 512 characters</param>
        /// <param name="campaignCode">Unique identifier for the campaign with a maximum length of 36 characters</param>
        /// <param name="color">Hex color value</param>
        /// <param name="favorite">Determines if the campaign will be flagged as a favorite</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> CreateCampaignAsyncWithHttpInfo (string name, string description, string campaignCode, string color, bool? favorite);
        /// <summary>
        /// getCampaign
        /// </summary>
        /// <remarks>
        /// Retrieves a campaign.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Campaign ID</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> GetCampaignByIdAsync (string id);

        /// <summary>
        /// getCampaign
        /// </summary>
        /// <remarks>
        /// Retrieves a campaign.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Campaign ID</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> GetCampaignByIdAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CampaignsApi : ICampaignsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CampaignsApi(String authBasePath, string clientId, string clientSecret, int accountId)
        {
            this.Configuration = new IO.Swagger.Client.Configuration
            {
                AuthenticationInstanceUrl = authBasePath,
                ClientId = clientId,
                ClientSecret = clientSecret,
                AccountId = accountId
            };

            var defaultDateTimeProvider = new DefaultDateTimeProvider();
            var cacheService = new CacheService(defaultDateTimeProvider);
            var apiClient = new ApiClient(authBasePath);
            var authService = new AuthService(this.Configuration, apiClient, cacheService);

            this.Configuration.ApiClient.RestClient.Authenticator =
                new IO.Swagger.Authentication.OAuth2Authenticator(authService);

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CampaignsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// createCampaign Creates a campaign.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the campaign with a maximum length of 128 characters</param>
        /// <param name="description">Description of the campaign with a maximum length of 512 characters</param>
        /// <param name="campaignCode">Unique identifier for the campaign with a maximum length of 36 characters</param>
        /// <param name="color">Hex color value</param>
        /// <param name="favorite">Determines if the campaign will be flagged as a favorite</param>
        /// <returns>Campaign</returns>
        public Campaign CreateCampaign (string name, string description, string campaignCode, string color, bool? favorite)
        {
             ApiResponse<Campaign> localVarResponse = CreateCampaignWithHttpInfo(name, description, campaignCode, color, favorite);
             return localVarResponse.Data;
        }

        /// <summary>
        /// createCampaign Creates a campaign.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the campaign with a maximum length of 128 characters</param>
        /// <param name="description">Description of the campaign with a maximum length of 512 characters</param>
        /// <param name="campaignCode">Unique identifier for the campaign with a maximum length of 36 characters</param>
        /// <param name="color">Hex color value</param>
        /// <param name="favorite">Determines if the campaign will be flagged as a favorite</param>
        /// <returns>ApiResponse of Campaign</returns>
        public ApiResponse< Campaign > CreateCampaignWithHttpInfo (string name, string description, string campaignCode, string color, bool? favorite)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CampaignsApi->CreateCampaign");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling CampaignsApi->CreateCampaign");
            // verify the required parameter 'campaignCode' is set
            if (campaignCode == null)
                throw new ApiException(400, "Missing required parameter 'campaignCode' when calling CampaignsApi->CreateCampaign");
            // verify the required parameter 'color' is set
            if (color == null)
                throw new ApiException(400, "Missing required parameter 'color' when calling CampaignsApi->CreateCampaign");
            // verify the required parameter 'favorite' is set
            if (favorite == null)
                throw new ApiException(400, "Missing required parameter 'favorite' when calling CampaignsApi->CreateCampaign");

            var localVarPath = "/hub/v1/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (campaignCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignCode", campaignCode)); // query parameter
            if (color != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "color", color)); // query parameter
            if (favorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "favorite", favorite)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Campaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Campaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Campaign)));
        }

        /// <summary>
        /// createCampaign Creates a campaign.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the campaign with a maximum length of 128 characters</param>
        /// <param name="description">Description of the campaign with a maximum length of 512 characters</param>
        /// <param name="campaignCode">Unique identifier for the campaign with a maximum length of 36 characters</param>
        /// <param name="color">Hex color value</param>
        /// <param name="favorite">Determines if the campaign will be flagged as a favorite</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> CreateCampaignAsync (string name, string description, string campaignCode, string color, bool? favorite)
        {
             ApiResponse<Campaign> localVarResponse = await CreateCampaignAsyncWithHttpInfo(name, description, campaignCode, color, favorite);
             return localVarResponse.Data;

        }

        /// <summary>
        /// createCampaign Creates a campaign.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the campaign with a maximum length of 128 characters</param>
        /// <param name="description">Description of the campaign with a maximum length of 512 characters</param>
        /// <param name="campaignCode">Unique identifier for the campaign with a maximum length of 36 characters</param>
        /// <param name="color">Hex color value</param>
        /// <param name="favorite">Determines if the campaign will be flagged as a favorite</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Campaign>> CreateCampaignAsyncWithHttpInfo (string name, string description, string campaignCode, string color, bool? favorite)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CampaignsApi->CreateCampaign");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling CampaignsApi->CreateCampaign");
            // verify the required parameter 'campaignCode' is set
            if (campaignCode == null)
                throw new ApiException(400, "Missing required parameter 'campaignCode' when calling CampaignsApi->CreateCampaign");
            // verify the required parameter 'color' is set
            if (color == null)
                throw new ApiException(400, "Missing required parameter 'color' when calling CampaignsApi->CreateCampaign");
            // verify the required parameter 'favorite' is set
            if (favorite == null)
                throw new ApiException(400, "Missing required parameter 'favorite' when calling CampaignsApi->CreateCampaign");

            var localVarPath = "/hub/v1/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (campaignCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignCode", campaignCode)); // query parameter
            if (color != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "color", color)); // query parameter
            if (favorite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "favorite", favorite)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Campaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Campaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Campaign)));
        }

        /// <summary>
        /// getCampaign Retrieves a campaign.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Campaign ID</param>
        /// <returns>Campaign</returns>
        public Campaign GetCampaignById (string id)
        {
             ApiResponse<Campaign> localVarResponse = GetCampaignByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getCampaign Retrieves a campaign.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Campaign ID</param>
        /// <returns>ApiResponse of Campaign</returns>
        public ApiResponse< Campaign > GetCampaignByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->GetCampaignById");

            var localVarPath = "/hub/v1/campaigns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Campaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Campaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Campaign)));
        }

        /// <summary>
        /// getCampaign Retrieves a campaign.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Campaign ID</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> GetCampaignByIdAsync (string id)
        {
             ApiResponse<Campaign> localVarResponse = await GetCampaignByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getCampaign Retrieves a campaign.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Campaign ID</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Campaign>> GetCampaignByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CampaignsApi->GetCampaignById");

            var localVarPath = "/hub/v1/campaigns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Campaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Campaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Campaign)));
        }

    }
}
