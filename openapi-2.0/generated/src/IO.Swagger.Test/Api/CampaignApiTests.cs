/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CampaignApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CampaignApiTests : ApiTests
    {
        private CampaignApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CampaignApi(authBasePath,
                clientId,
                clientSecret,
                accountId);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        [Test]
        public void CreateCampaignTest()
        {
            var name = $"Campaign name";
            var description = $"Campaign description";
            var campaignCode = $"Campaign code";
            var color = "0000ff";
            var favorite = false;

            var campaign = new Campaign(name, description, campaignCode, color, favorite);

            var response = instance.CreateCampaign(campaign);

            Assert.AreEqual(name, response.Name);
            Assert.AreEqual(description, response.Description);
            Assert.AreEqual(campaignCode.Replace(" ",""), response.CampaignCode); // the server removes all spaces from the campaign code
            Assert.AreEqual(color, response.Color);
            Assert.AreEqual(favorite, response.Favorite);
        }
        
        [Test]
        public void GetCampaignByIdTest()
        {
            var name = $"Campaign name";
            var description = $"Campaign description";
            var campaignCode = $"Campaign code";
            var color = "0000ff";
            var favorite = false;

            var campaign = new Campaign(name, description, campaignCode, color, favorite);

            var helperResponse = instance.CreateCampaign(campaign);
            Assert.IsInstanceOf<Campaign>(helperResponse);

            var campaignToGetId = helperResponse.Id;
            var response = instance.GetCampaignById(campaignToGetId);

            Assert.AreEqual(name, response.Name);
            Assert.AreEqual(description, response.Description);
            Assert.AreEqual(campaignCode.Replace(" ", ""), response.CampaignCode); // the server removes all spaces from the campaign code
            Assert.AreEqual(color, response.Color);
            Assert.AreEqual(favorite, response.Favorite);
        }
    }
}
